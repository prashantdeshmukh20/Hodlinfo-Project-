import _objectSpread from "C:\\hodlinfo-frontend\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "C:\\hodlinfo-frontend\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/objectWithoutProperties";
import classNames from 'classnames';
import PropTypes from 'prop-types';
import * as React from 'react';
import FormCheck from './FormCheck';
import FormControl from './FormControl';
import FormFloating from './FormFloating';
import FormGroup from './FormGroup';
import FormLabel from './FormLabel';
import FormRange from './FormRange';
import FormSelect from './FormSelect';
import FormText from './FormText';
import Switch from './Switch';
import FloatingLabel from './FloatingLabel';
import {
    jsx as _jsx
} from "react/jsx-runtime";
var propTypes = {
    /**
     * The Form `ref` will be forwarded to the underlying element,
     * which means, unless it's rendered `as` a composite component,
     * it will be a DOM node, when resolved.
     *
     * @type {ReactRef}
     * @alias ref
     */
    _ref: PropTypes.any,

    /**
     * Mark a form as having been validated. Setting it to `true` will
     * toggle any validation styles on the forms elements.
     */
    validated: PropTypes.bool,
    as: PropTypes.elementType
};
var Form = /*#__PURE__*/ React.forwardRef(function(_ref, ref) {
    var className = _ref.className,
        validated = _ref.validated,
        _ref$as = _ref.as,
        Component = _ref$as === void 0 ? 'form' : _ref$as,
        props = _objectWithoutProperties(_ref, ["className", "validated", "as"]);

    return /*#__PURE__*/ _jsx(Component, _objectSpread(_objectSpread({}, props), {}, {
        ref: ref,
        className: classNames(className, validated && 'was-validated')
    }));
});
Form.displayName = 'Form';
Form.propTypes = propTypes;
export default Object.assign(Form, {
    Group: FormGroup,
    Control: FormControl,
    Floating: FormFloating,
    Check: FormCheck,
    Switch: Switch,
    Label: FormLabel,
    Text: FormText,
    Range: FormRange,
    Select: FormSelect,
    FloatingLabel: FloatingLabel
});