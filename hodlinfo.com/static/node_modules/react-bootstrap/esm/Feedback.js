import _objectSpread from "C:\\hodlinfo-frontend\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "C:\\hodlinfo-frontend\\node_modules\\babel-preset-react-app\\node_modules\\@babel\\runtime/helpers/esm/objectWithoutProperties";
import classNames from 'classnames';
import * as React from 'react';
import PropTypes from 'prop-types';
import {
    jsx as _jsx
} from "react/jsx-runtime";
var propTypes = {
    /**
     * Specify whether the feedback is for valid or invalid fields
     *
     * @type {('valid'|'invalid')}
     */
    type: PropTypes.string,

    /** Display feedback as a tooltip. */
    tooltip: PropTypes.bool,
    as: PropTypes.elementType
};
var Feedback = /*#__PURE__*/ React.forwardRef( // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
    function(_ref, ref) {
        var _ref$as = _ref.as,
            Component = _ref$as === void 0 ? 'div' : _ref$as,
            className = _ref.className,
            _ref$type = _ref.type,
            type = _ref$type === void 0 ? 'valid' : _ref$type,
            _ref$tooltip = _ref.tooltip,
            tooltip = _ref$tooltip === void 0 ? false : _ref$tooltip,
            props = _objectWithoutProperties(_ref, ["as", "className", "type", "tooltip"]);

        return /*#__PURE__*/ _jsx(Component, _objectSpread(_objectSpread({}, props), {}, {
            ref: ref,
            className: classNames(className, "".concat(type, "-").concat(tooltip ? 'tooltip' : 'feedback'))
        }));
    });
Feedback.displayName = 'Feedback';
Feedback.propTypes = propTypes;
export default Feedback;